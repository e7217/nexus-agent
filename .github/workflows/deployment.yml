name: Deploy to Self-Hosted Runner

on:
  push:
    branches: [ main, master, feat/**, feat/* ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: '배포 환경 선택'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#           - production
#           - staging

jobs:
  deploy:
    name: Deploy to Self-Hosted Runner
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up environment variables
        shell: pwsh
        run: |
          @"
          APISERVER_PORT_EXTERNAL=3100
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          "@ | Out-File -FilePath .env -Encoding utf8
      
    #   - name: Login to GitHub Container Registry
    #     uses: docker/login-action@v2
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and tag Docker images
        shell: pwsh
        run: |
          docker-compose build --no-cache api-server
      
      - name: Stop running containers
        shell: pwsh
        run: |
          docker-compose down
        continue-on-error: true
      
      - name: Start Docker Compose services
        shell: pwsh
        run: |
          docker-compose up -d --remove-orphans
      
      - name: Check service health
        shell: pwsh
        run: |
          # 서비스가 정상적으로 시작되었는지 확인
          Start-Sleep -Seconds 20
          $response = Invoke-WebRequest -Uri "http://localhost:3100/api/health" -UseBasicParsing
          $content = $response.Content
          if (-not ($content -match '"status":\s*"healthy"')) {
            Write-Host "서비스 상태 확인 실패"
            docker-compose logs
            exit 1
          }
          Write-Host "서비스가 정상적으로 배포되었습니다."
      
      - name: Clean up old images
        shell: pwsh
        run: |
          # 사용하지 않는 이미지 정리
          docker image prune -af --filter "until=24h"
        continue-on-error: true
