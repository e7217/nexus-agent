name: Deploy to Self-Hosted Runner

on:
  push:
    branches: [ main, master ]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: '배포 환경 선택'
#         required: true
#         default: 'production'
#         type: choice
#         options:
#           - production
#           - staging

jobs:
  deploy:
    name: Deploy to Self-Hosted Runner
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up environment variables
        run: |
          cat > .env << EOF
          APISERVER_PORT_EXTERNAL=3100
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          EOF
      
    #   - name: Login to GitHub Container Registry
    #     uses: docker/login-action@v2
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and tag Docker images
        run: |
          docker-compose build --no-cache api-server
      
      - name: Stop running containers
        run: |
          docker-compose down || true
        continue-on-error: true
      
      - name: Start Docker Compose services
        run: |
          docker-compose up -d --remove-orphans
      
      - name: Check service health
        run: |
          # 서비스가 정상적으로 시작되었는지 확인
          sleep 10
          if ! curl -s http://localhost:3100/api/health | grep -q "healthy"; then
            echo "서비스 상태 확인 실패"
            docker-compose logs
            exit 1
          fi
          echo "서비스가 정상적으로 배포되었습니다."
      
      - name: Clean up old images
        run: |
          # 사용하지 않는 이미지 정리
          docker image prune -af --filter "until=24h"
        continue-on-error: true
